WinMain() -> Log file created successfully
[INFO] TsFillInstanceExtensionNames() -> First call to vkEnumerateInstanceExtensionProperties() succeeded at 1234
[INFO] TsFillInstanceExtensionNames() -> Second call to vkEnumerateInstanceExtensionProperties() succeeded at 1256
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_surface
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_win32_surface
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_external_memory_capabilities
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_external_semaphore_capabilities
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_external_fence_capabilities
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_get_physical_device_properties2
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_get_surface_capabilities2
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_device_group_creation
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_EXT_swapchain_colorspace
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_KHR_surface_protected_capabilities
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_EXT_debug_report
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_EXT_debug_utils
[INFO] TsFillInstanceExtensionNames() -> Vulkan Extension Name = VK_NV_external_memory_capabilities
[INFO] TsFillInstanceExtensionNames() -> VK_KHR_SURFACE_EXTENSION_NAME found at 1341
[INFO] TsFillInstanceExtensionNames() -> VK_KHR_WIN32_SURFACE_EXTENSION_NAME found at 1352
[INFO] TsFillInstanceExtensionNames() -> Validation is ON and required VK_EXT_DEBUG_REPORT_EXTENSION_NAME is supported at 1372
[INFO] TsFillInstanceExtensionNames() -> Enabled Vulkan Instance Extension Name = VK_KHR_surface
[INFO] TsFillInstanceExtensionNames() -> Enabled Vulkan Instance Extension Name = VK_KHR_win32_surface
[INFO] TsFillInstanceExtensionNames() -> Enabled Vulkan Instance Extension Name = VK_EXT_debug_report
[INFO] TsCreateVulkanInstance() -> TsFillInstanceExtensionNames() succeeded at 1123
[INFO] TsFillValidationLayerNames() -> First call to vkEnumerateInstanceLayerProperties() succeeded with validationLayerCount 11 at 1406
[INFO] TsFillValidationLayerNames() -> Second call to vkEnumerateInstanceLayerProperties() succeeded at 1426
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_NV_optimus
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_OBS_HOOK
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_LUNARG_api_dump
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_LUNARG_gfxreconstruct
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_KHRONOS_synchronization2
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_KHRONOS_validation
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_LUNARG_monitor
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_LUNARG_screenshot
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_KHRONOS_profiles
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_KHRONOS_shader_object
[INFO] TsFillValidationLayerNames() -> Vulkan Instance Layer Name = VK_LAYER_LUNARG_crash_diagnostic
[INFO] TsFillValidationLayerNames() -> VK_LAYER_KHRONOS_validation is supported at 1493
[INFO] TsFillValidationLayerNames() -> Enabled Vulkan Validation Layer Name VK_LAYER_KHRONOS_validation
[INFO] TsCreateVulkanInstance() -> TsFillValidationLayerNames() succeeded at 1137
[INFO] TsCreateInstanceInf() -> vkCreateInstance() succeeded at 1194
[INFO] TsCreateValidationCallbackFunction() -> vkGetInstanceProcAddr() succeeded to get function pointer for vkCreateDebugReportCallbackEXT() at 1527
[INFO] TsCreateValidationCallbackFunction() -> vkGetInstanceProcAddr() succeeded to get function pointer for vkDestroyDebugReportCallbackEXT() at 1539
[ERROR] TsCreateValidationCallbackFunction() -> vkCreateDebugReportCallbackEXT_fnptr() failed with 0 at 1556
[INFO] TsCreateVulkanInstance() -> TsCreateValidationCallbackFunction() succeeded at 1208
[INFO] TsInitialize() -> TsCreateVulkanInstance() succeeded at 365 
[INFO] TsGetSupportedSurface() -> vkCreateWin32SurfaceKHR() succeeded at 1098
[INFO] TsInitialize() -> TsGetSupportedSurface() succeeded at 377 
[INFO] TsGetPhysicalDevice() -> First call to vkEnumeratePhysicalDevices() succeeded at 943
[INFO] TsGetPhysicalDevice() -> Second call to vkEnumeratePhysicalDevices() succeeded at 958
[INFO] TsGetPhysicalDevice() -> Succeeded to free isQueueSurfaceSupported_array at 1006
[INFO] TsGetPhysicalDevice() -> Succeeded to free vkQueueFamilyProperties_array at 1013
[INFO] TsGetPhysicalDevice() -> vkGetPhysicalDeviceProperties() Intel(R) UHD Graphics 620 physical device with graphics enabled is selected at 1025
[INFO] TsGetPhysicalDevice() -> is succeeded to select required physical device with graphics enabled at 1026
[INFO] TsGetPhysicalDevice() -> Selected physical device supports tessellation shader
[INFO] TsGetPhysicalDevice() -> Selected physical device supports geometry shader
[INFO] TsInitialize() -> TsGetPhysicalDevice() succeeded at 389 
[INFO] ********** Print Vulkan Info **********
[INFO] API Version = 1.2.151
[INFO] Device Name = Intel(R) UHD Graphics 620
[INFO] Device Type = Integrated GPU (iGPU)
[INFO] Vendor ID = 0x8086
[INFO] Device ID = 0x3ea0
[INFO] API Version = 1.2.142
[INFO] Device Name = GeForce MX110
[INFO] Device Type = Discrete GPU (dGPU)
[INFO] Vendor ID = 0x10de
[INFO] Device ID = 0x174e
[INFO] TsPrintVKInfo() -> Succeeded to free global vkPhysicalDevice_array at 917
[INFO] TsInitialize() -> TsPrintVkInfo() succeeded at 401 
[INFO] TsFillDeviceExtensionNames() -> First call to vkEnumerateDeviceExtensionProperties() succeeded at 1586
[INFO] TsFillDeviceExtensionNames() -> Device Count = 74
[INFO] TsFillDeviceExtensionNames() -> Second call to vkEnumerateDeviceExtensionProperties() succeeded at 1610
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_full_screen_exclusive
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_swapchain
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_external_memory
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_external_memory_win32
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_external_memory_host
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_external_semaphore
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_external_semaphore_win32
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_external_fence
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_external_fence_win32
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_timeline_semaphore
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_win32_keyed_mutex
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_get_memory_requirements2
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_bind_memory2
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_dedicated_allocation
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_sampler_mirror_clamp_to_edge
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_maintenance1
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_maintenance2
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_maintenance3
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_shader_draw_parameters
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_push_descriptor
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_descriptor_update_template
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_multiview
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_shader_float16_int8
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_shader_float_controls
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_16bit_storage
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_8bit_storage
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_shader_subgroup_ballot
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_shader_subgroup_vote
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_storage_buffer_storage_class
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_variable_pointers
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_relaxed_block_layout
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_sampler_filter_minmax
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_device_group
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_post_depth_coverage
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_shader_viewport_index_layer
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_shader_stencil_export
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_conservative_rasterization
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_sample_locations
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_draw_indirect_count
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_image_format_list
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_vertex_attribute_divisor
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_descriptor_indexing
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_inline_uniform_block
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_create_renderpass2
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_swapchain_mutable_format
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_depth_stencil_resolve
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_driver_properties
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_vulkan_memory_model
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_conditional_rendering
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_depth_clip_enable
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_scalar_block_layout
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_imageless_framebuffer
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_buffer_device_address
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_buffer_device_address
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_host_query_reset
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_NV_device_diagnostic_checkpoints
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_separate_depth_stencil_layouts
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_shader_clock
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_spirv_1_4
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_uniform_buffer_standard_layout
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_separate_stencil_usage
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_fragment_shader_interlock
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_index_type_uint8
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_shader_subgroup_extended_types
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_line_rasterization
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_memory_budget
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_texel_buffer_alignment
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_INTEL_performance_query
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_subgroup_size_control
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_shader_demote_to_helper_invocation
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_pipeline_creation_feedback
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_pipeline_creation_cache_control
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_KHR_pipeline_executable_properties
[INFO] TsFillDeviceExtensionNames() -> Vulkan Device Extension Name = VK_EXT_transform_feedback
[INFO] TsFillDeviceExtensionNames() -> VK_KHR_SWAPCHAIN_EXTENSION_NAME found at 1674
[INFO] TsFillDeviceExtensionNames() -> Enabled Vulkan Device Extension Name = VK_KHR_swapchain
[INFO] TsCreateVulkanDevice() -> TsFillDeviceExtensionNames() succeeded at 1707
[INFO] TsCreateVulkanDevice() -> vkCreateDevice() succeeded at 1751
[INFO] TsInitialize() -> TsCreateVulkanDevice() succeeded at 413 
[INFO] TsGetDeviceQueue() -> vkGetDeviceQueue() succeeded
[INFO] TsGetPhysicalDeviceSurfaceFormatAndColorSpace() -> First call to vkGetPhysicalDeviceSurfaceFormatsKHR() succeeded at 1798
[INFO] TsGetPhysicalDeviceSurfaceFormatAndColorSpace() -> Second call to vkGetPhysicalDeviceSurfaceFormatsKHR() succeeded at 1814
[INFO] TsGetPhysicalDeviceSurfaceFormatAndColorSpace() -> vkSurfaceFormatKHR_array freed successfully vkFormat_color: 44 and vkColorSpaceKHR: 0
[INFO] TsCreateSwapchain() -> TsGetPhysicalDeviceSurfaceFormatAndColorSpace() succeeded at 1933 
[INFO] TsCreateSwapchain() -> vkGetPhysicalDeviceSurfaceCapabilitiesKHR() succeeded at 1948 
[INFO] TsCreateSwapchain() -> Swapchain Image width x height = 784 x 561 maxImageCount = 64 and minImageCount = 2 at 1970
[INFO] TsGetPhysicalDevicePresentMode() -> First call to vkGetPhysicalDeviceSurfacePresentModesKHR() succeeded at 1864
[INFO] TsGetPhysicalDevicePresentMode() -> Second call to vkGetPhysicalDeviceSurfacePresentModesKHR() succeeded at 1880
[INFO] TsGetPhysicalDevicePresentMode() -> vkPresentModeKHR_array freed successfully vkPresentModeKHR: 2 
[INFO] TsCreateSwapchain() -> TsGetPhysicalDevicePresentMode() succeeded at 2010 
[INFO] TsCreateSwapchain() -> vkCreateSwapchainKHR() succeeded at 2042 
[INFO] TsInitialize() -> TsCreateSwapchain() succeeded at 430 
[INFO] TsCreateImagesAndImageViews() -> vkGetSwapchainImagesKHR() first call with swapchain desired image count: 2 succeeded at 2070 
[INFO] TsCreateImagesAndImageViews() -> vkGetSwapchainImagesKHR() second call succeeded at 2086 
[INFO] TsCreateImagesAndImageViews() -> vkCreateImageView() for iteration:0 succeeded at 2127 
[INFO] TsCreateImagesAndImageViews() -> vkCreateImageView() for iteration:1 succeeded at 2127 
[INFO] TsInitialize() -> TsCreateImagesAndImageViews() succeeded gives swapchain image count: 2 at 442 
[INFO] TsCreateCommandPool() -> vkCreateCommandPool() second call succeeded at 2162 
[INFO] TsInitialize() -> TsCreateCommandPool() succeeded at 454 
[INFO] TsCreateCommandBuffers() -> vkAllocateCommandBuffers() for iteration:0 succeeded at 2205 
[INFO] TsCreateCommandBuffers() -> vkAllocateCommandBuffers() for iteration:1 succeeded at 2205 
[INFO] TsInitialize() -> TsCreateCommandBuffers() succeeded at 466 
[INFO] TsCreateRenderPass() -> vkCreateRenderPass() succeeded at 2280 
[INFO] TsInitialize() -> TsCreateRenderPass() succeeded at 478 
[INFO] TsCreateFrameBuffers() -> vkCreateFramebuffer() succeeded  for 0 index at 2328 
[INFO] TsCreateFrameBuffers() -> vkCreateFramebuffer() succeeded  for 1 index at 2328 
[INFO] TsInitialize() -> TsCreateFrameBuffers() succeeded at 490 
[INFO] TsCreateSemaphores() -> vkCreateSemaphore() succeeded for vkSemaphore_backbuffer at 2360 
[INFO] TsCreateSemaphores() -> vkCreateSemaphore() succeeded for vkSemaphore_rendercomplete at 2372 
[INFO] TsInitialize() -> TsCreateSemaphores() succeeded at 502 
[INFO] TsCreateFences() -> vkCreateFence() succeeded for 0 index at 2408 
[INFO] TsCreateFences() -> vkCreateFence() succeeded for 1 index at 2408 
[INFO] TsInitialize() -> TsCreateFences() succeeded at 514 
[INFO] TsBuildCommandBuffers() -> vkResetCommandBuffer() succeeded for 0 index at 2434 
[INFO] TsBuildCommandBuffers() -> vkBeginCommandBuffer() succeeded for 0 index at 2452 
[INFO] TsBuildCommandBuffers() -> vkEndCommandBuffer() succeeded for 0 index at 2498 
[INFO] TsBuildCommandBuffers() -> vkResetCommandBuffer() succeeded for 1 index at 2434 
[INFO] TsBuildCommandBuffers() -> vkBeginCommandBuffer() succeeded for 1 index at 2452 
[INFO] TsBuildCommandBuffers() -> vkEndCommandBuffer() succeeded for 1 index at 2498 
[INFO] TsInitialize() -> TsBuildCommandBuffers() succeeded at 535 
[INFO] Winmain() TsInitialize() succeeded
[INFO] TsDisplay() -> vkAcquireNextImageKHR() failed with 1000001003 at 583 
[TS_VALIDATION]: debugReportCallback() -> Validation (0) = Validation Error: [ VUID-vkAcquireNextImageKHR-semaphore-01286 ] Object 0: handle = 0xe88693000000000c, type = VK_OBJECT_TYPE_SEMAPHORE; | MessageID = 0xe9e4b2a9 | vkAcquireNextImageKHR():  Semaphore must not be currently signaled.
The Vulkan spec states: If semaphore is not VK_NULL_HANDLE, it must be unsignaled (https://vulkan.lunarg.com/doc/view/1.3.296.0/windows/1.3-extensions/vkspec.html#VUID-vkAcquireNextImageKHR-semaphore-01286)
[TS_VALIDATION]: debugReportCallback() -> Validation (0) = Validation Error: [ VUID-vkAcquireNextImageKHR-surface-07783 ] Object 0: handle = 0xfa21a40000000003, type = VK_OBJECT_TYPE_SWAPCHAIN_KHR; | MessageID = 0xad0e15f6 | vkAcquireNextImageKHR():  Application has already previously acquired 1 image from swapchain. Only 1 is available to be acquired using a timeout of UINT64_MAX (given the swapchain has 2, and VkSurfaceCapabilitiesKHR::minImageCount is 2).
The Vulkan spec states: If forward progress cannot be guaranteed for the surface used to create the swapchain member of pAcquireInfo, timeout must not be UINT64_MAX (https://vulkan.lunarg.com/doc/view/1.3.296.0/windows/1.3-extensions/vkspec.html#VUID-vkAcquireNextImageKHR-surface-07783)
[INFO] TsDisplay() -> vkAcquireNextImageKHR() failed with 1000001003 at 583 
[INFO] TsUninitialize() -> vkDeviceWaitIdle() is done
[INFO] TsUninitialize() -> vkDestroyFence() is successfully done for 0 index
[INFO] TsUninitialize() -> vkDestroyFence() is successfully done for 1 index
[INFO] TsUninitialize() -> vkFence_array released successfully
[INFO] TsUninitialize() -> vkSemaphore_rendercomplete released successfully
[INFO] TsUninitialize() -> vkSemaphore_backbuffer released successfully
[INFO] TsUninitialize() -> vkDestroyFramebuffer() is successfully done for 0 index
[INFO] TsUninitialize() -> vkDestroyFramebuffer() is successfully done for 1 index
[INFO] TsUninitialize() -> vkFrameBuffer_array released successfully
[INFO] TsUninitialize() -> vkDestroyRenderPass() is successfully done
[INFO] TsUninitialize() -> vkFreeCommandBuffers() is successfully done for iteration: 0
[INFO] TsUninitialize() -> vkFreeCommandBuffers() is successfully done for iteration: 1
[INFO] TsUninitialize() -> vkCommandBuffer_array is successfully freed
[INFO] TsUninitialize() -> vkDestroyCommandPool() is successfully done
[INFO] TsUninitialize() -> vkDestroyImageView() is successfully done for iteration: 0
[INFO] TsUninitialize() -> vkDestroyImageView() is successfully done for iteration: 1
[INFO] TsUninitialize() -> swapchainImageView_array is successfully destroyed
[INFO] TsUninitialize() -> swapchainImage_array is successfully destroyed
[INFO] TsUninitialize() -> vkDestroySwapchainKHR() is successfully done
[INFO] TsUninitialize() -> vkDestroyDevice() is successfully done
[INFO] TsUninitialize() -> vkDestroySurfaceKHR() successfully done
[INFO] TsUninitialize() -> vkDestroyInstance() successfully done
[INFO] TsUninitialize() -> Log file closed successfully and program closed successfully
